---
import { Icon } from "astro-icon/components";
import { css, cx, cva } from "../../../../styled-system/css";
import { grid, gridItem } from "../../../../styled-system/patterns";

const WhatIDoStyles = cva({

    base: {
        width: {
            xsm: '80%',
            md: '70%'
        }, 
        height: {
            xsm: 'fit-content',
            md: 'auto'
        }, 
        // backgroundColor: 'red.200',
        display: 'flex',
        flexDirection: {
            xsm: 'column',
            md: 'row'
        },
        "& #whatIDo_container": {
            width: '100%', 
            height: '100%', 
            // backgroundColor: 'red.400', 
            display: 'flex', 
            flexDirection: 'column',
            "& #title_content": {
                fontFamily: {
                    xsm: 'ubuntu_medium'
                }, 
                fontSize: {
                    xsm: '3xl',
                    md: '4xl'
                }, 
                color: 'white'
            }
        },
    }
})

const DetailsStyles = cva({

    base: {
        width: '100%',
        height: 'fit-content',
        backgroundColor: '#121212'
    }

});

const CardMatrixStyles = cva({

    base: {
        display: 'flex',
        width: {
            xsm: '100%'
        },
        height: {
            xsm: '350px',
            md: '100%'
        },
    }

});
---

<div id="container" class={cx( WhatIDoStyles({}) )}>

    <div id="whatIDo_container">
        <div id="whatIDo_title__container" class="flex w-full h-[25%] items-center">
            <p id="title_content">
                ¿Qué es lo que hago?
            </p>
        </div>
        <div id="whatIDo_content" class="w-full h-fit">
            <details class={cx( DetailsStyles({}), "tw-details" )} name="exclusive" open>
                <summary class:list={["tw-summary", "flex",]}>
                    <Icon name="utils/window" class="tw-summary__icon"/>
                    <p class:list={["tw-summary"]}>Desarrollo Web</p>
                </summary>
                <ul class:list={["tw-ul"]}>
                    <li>SPA (Single Page Application)</li>
                    <li>Landing page y sitios para negocios</li>
                    <li>Sitios web de portafolios</li>
                </ul>
            </details>
            <details class={cx( DetailsStyles({}), "tw-details" )} name="exclusive">
                <summary class:list={["tw-summary"]}>
                    <Icon name="utils/mobile" class="tw-summary__icon"/>
                    <p class:list={["tw-summary"]}>Desarrollo Móvil</p>
                </summary>
                <ul class:list={["tw-ul"]}>
                    <li>Desarrollo móvil amigable</li>
                    <li>Aplicaciones React Native</li>
                </ul>
            </details>
            <details class={cx( DetailsStyles({}), "tw-details" )} name="exclusive">
                <summary class:list={["tw-summary"]}>
                    <Icon name="utils/tent" class="tw-summary__icon"/>
                    <p class:list={["tw-summary"]}>Desarrollo del UI</p>
                </summary>
                <ul class:list={["tw-ul"]}>
                    <li>Desarrollo bajo pre prototipo UI</li>
                    <li>Desarrollo bajo demanda</li>
                </ul>
            </details>
        </div>
    </div>

    <div class={ cx(CardMatrixStyles({}), "tw-card-matrix") }>
        <div id="recuadro"></div>
    </div>

</div>

<style>

    @reference "../../../styles/global.css";

    #container {
        @apply -mt-5 md:mt-0
    }

    details {
        overflow: hidden;
    }
    .tw-details {
        @apply mt-4 p-2 border-[1px] border-[rgba(169, 169, 169, 0.2)] rounded-xl
    }

    .tw-summary {
        @apply flex text-[18px] text-white p-2;
        align-items: center;

        & .tw-summary__icon {
            @apply mr-1 w-7 h-7
        }
    }
    summary::after {
        content: '';
        background: url('../../../icons/utils/chevron-arrow-down-white.svg');
        width: 20px;
        height: 20px;
        fill: white;
        color: white;
        background-size: cover;
        margin-left: auto;
        transition: 0.5s;
        margin-top: 5px;
    }
    details[open] > summary::after {
        transform: rotate(180deg);
    }

    .tw-ul {
        @apply list-disc text-gray-300 ml-4 text-sm marker:text-[10px] leading-6;
    }
    details ul {
        opacity: 0;
    }
    details[open] ul {
        animation: fadeIn 0.9s linear forwards;
    }

    @keyframes fadeIn {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }


    .tw-card-matrix {
        @apply mt-8 md:mt-0;

        & #recuadro {
            width: 100%;
            height: 100%;
            background-color: #161515;
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            grid-template-rows: repeat(10, 1fr);
            gap: 2px;
            padding: 5px;
        }
    }

    .caracter {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 16px;
        transition: color 0.3s ease;
    }

</style>

<script>
    
    const recuadro = document.getElementById('recuadro');
    const colores = ['#a476ff', '#533d7f', '#2a213c'];
    const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%&*()_+';

    // Crear 100 elementos de caracteres
    for (let i = 0; i < 100; i++) {
        const div = document.createElement('div');
        div.classList.add('caracter');
        recuadro!.appendChild(div);
    }

    const elementosCaracter = document.querySelectorAll('.caracter');

    function cambiarCaracteres() {
        elementosCaracter.forEach(elemento => {
            // Cambiar carácter
            const caracterAleatorio = caracteres[Math.floor(Math.random() * caracteres.length)];
            elemento.textContent = caracterAleatorio;

            // Cambiar color
            const colorAleatorio = colores[Math.floor(Math.random() * colores.length)];
            (elemento as HTMLElement).style.color = colorAleatorio;
        });
    }

    // Iniciar cambios cada 500 milisegundos
    setInterval(cambiarCaracteres, 500);
    
    // Llamar inmediatamente para el estado inicial
    cambiarCaracteres();

</script>